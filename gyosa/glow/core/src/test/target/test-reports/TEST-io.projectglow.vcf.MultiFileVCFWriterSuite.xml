<?xml version='1.0' encoding='UTF-8'?>
<testsuite hostname="cloud122" name="io.projectglow.vcf.MultiFileVCFWriterSuite" tests="34" errors="0" failures="1" skipped="0" time="15.465" timestamp="2023-11-03T13:37:47">
                     <properties>
      <property name="jline.esc.timeout" value="0"/><property name="jna.platform.library.path" value="/usr/lib/x86_64-linux-gnu:/lib/x86_64-linux-gnu:/lib64:/usr/lib:/lib:/usr/lib/x86_64-linux-gnu/libfakeroot"/><property name="java.runtime.name" value="Java(TM) SE Runtime Environment"/><property name="sun.boot.library.path" value="/usr/lib/jvm/jdk1.8.0_211/jre/lib/amd64"/><property name="java.vm.version" value="25.211-b12"/><property name="java.vm.vendor" value="Oracle Corporation"/><property name="java.vendor.url" value="http://java.oracle.com/"/><property name="path.separator" value=":"/><property name="jna.loaded" value="true"/><property name="java.vm.name" value="Java HotSpot(TM) 64-Bit Server VM"/><property name="file.encoding.pkg" value="sun.io"/><property name="user.country" value="US"/><property name="sun.java.launcher" value="SUN_STANDARD"/><property name="sun.os.patch.level" value="unknown"/><property name="jna.nosys" value="true"/><property name="java.vm.specification.name" value="Java Virtual Machine Specification"/><property name="user.dir" value="/home/gsd/gyosa/glow"/><property name="java.runtime.version" value="1.8.0_211-b12"/><property name="java.awt.graphicsenv" value="sun.awt.X11GraphicsEnvironment"/><property name="java.endorsed.dirs" value="/usr/lib/jvm/jdk1.8.0_211/jre/lib/endorsed"/><property name="os.arch" value="amd64"/><property name="java.io.tmpdir" value="/tmp"/><property name="line.separator" value="
"/><property name="java.vm.specification.vendor" value="Oracle Corporation"/><property name="java.util.logging.manager" value="wvlet.log.AirframeLogManager"/><property name="log4j.ignoreTCL" value="true"/><property name="os.name" value="Linux"/><property name="sun.jnu.encoding" value="ISO-8859-1"/><property name="jnidispatch.path" value="/tmp/jna-102648/jna1976320173356081238.tmp"/><property name="java.library.path" value="/usr/java/packages/lib/amd64:/usr/lib64:/lib64:/lib:/usr/lib"/><property name="java.specification.name" value="Java Platform API Specification"/><property name="java.class.version" value="52.0"/><property name="sun.management.compiler" value="HotSpot 64-Bit Tiered Compilers"/><property name="os.version" value="4.15.0-202-generic"/><property name="swoval.tmpdir" value="/home/gsd/.sbt/1.0"/><property name="user.home" value="/home/gsd"/><property name="user.timezone" value="Europe/Lisbon"/><property name="java.awt.printerjob" value="sun.print.PSPrinterJob"/><property name="file.encoding" value="UTF-8"/><property name="java.specification.version" value="1.8"/><property name="java.class.path" value="/home/gsd/.cache/sbt/boot/sbt-launch/1.8.2/sbt-launch-1.8.2.jar"/><property name="user.name" value="gsd"/><property name="jline.shutdownhook" value="false"/><property name="java.vm.specification.version" value="1.8"/><property name="sun.java.command" value="/home/gsd/.cache/sbt/boot/sbt-launch/1.8.2/sbt-launch-1.8.2.jar"/><property name="java.home" value="/usr/lib/jvm/jdk1.8.0_211/jre"/><property name="sun.arch.data.model" value="64"/><property name="user.language" value="en"/><property name="java.specification.vendor" value="Oracle Corporation"/><property name="awt.toolkit" value="sun.awt.X11.XToolkit"/><property name="java.vm.info" value="mixed mode"/><property name="java.version" value="1.8.0_211"/><property name="java.ext.dirs" value="/usr/lib/jvm/jdk1.8.0_211/jre/lib/ext:/usr/java/packages/lib/ext"/><property name="sun.boot.class.path" value="/usr/lib/jvm/jdk1.8.0_211/jre/lib/resources.jar:/usr/lib/jvm/jdk1.8.0_211/jre/lib/rt.jar:/usr/lib/jvm/jdk1.8.0_211/jre/lib/sunrsasign.jar:/usr/lib/jvm/jdk1.8.0_211/jre/lib/jsse.jar:/usr/lib/jvm/jdk1.8.0_211/jre/lib/jce.jar:/usr/lib/jvm/jdk1.8.0_211/jre/lib/charsets.jar:/usr/lib/jvm/jdk1.8.0_211/jre/lib/jfr.jar:/usr/lib/jvm/jdk1.8.0_211/jre/classes"/><property name="java.vendor" value="Oracle Corporation"/><property name="file.separator" value="/"/><property name="java.vendor.url.bug" value="http://bugreport.sun.com/bugreport/"/><property name="sun.io.unicode.encoding" value="UnicodeLittle"/><property name="sun.cpu.endian" value="little"/><property name="sbt.script" value="/usr/bin/sbt"/><property name="sun.cpu.isalist" value=""/>
    </properties>
                     <testcase classname="io.projectglow.vcf.MultiFileVCFWriterSuite" name="Read single sample VCF with VCF parser ((flattenInfoFields,true))" time="0.443">
                                                 
                                               </testcase><testcase classname="io.projectglow.vcf.MultiFileVCFWriterSuite" name="Read single sample VCF with VCF parser ((,))" time="0.367">
                                                 
                                               </testcase><testcase classname="io.projectglow.vcf.MultiFileVCFWriterSuite" name="Read multi-sample VCF with VCF parser ((flattenInfoFields,true))" time="0.205">
                                                 
                                               </testcase><testcase classname="io.projectglow.vcf.MultiFileVCFWriterSuite" name="Read multi-sample VCF with VCF parser ((,))" time="0.21">
                                                 
                                               </testcase><testcase classname="io.projectglow.vcf.MultiFileVCFWriterSuite" name="Read VEP VCF with VCF parser ((flattenInfoFields,true))" time="0.222">
                                                 
                                               </testcase><testcase classname="io.projectglow.vcf.MultiFileVCFWriterSuite" name="Read VEP VCF with VCF parser ((,))" time="0.223">
                                                 
                                               </testcase><testcase classname="io.projectglow.vcf.MultiFileVCFWriterSuite" name="Read Loftee VCF with VCF parser ((flattenInfoFields,true))" time="0.304">
                                                 
                                               </testcase><testcase classname="io.projectglow.vcf.MultiFileVCFWriterSuite" name="Read Loftee VCF with VCF parser ((,))" time="0.26">
                                                 
                                               </testcase><testcase classname="io.projectglow.vcf.MultiFileVCFWriterSuite" name="Read SnpEff VCF with VCF parser ((flattenInfoFields,true))" time="0.219">
                                                 
                                               </testcase><testcase classname="io.projectglow.vcf.MultiFileVCFWriterSuite" name="Read SnpEff VCF with VCF parser ((,))" time="0.211">
                                                 
                                               </testcase><testcase classname="io.projectglow.vcf.MultiFileVCFWriterSuite" name="Use VCF parser without sample IDs" time="0.293">
                                                 
                                               </testcase><testcase classname="io.projectglow.vcf.MultiFileVCFWriterSuite" name="Use VCF parser without sample IDs (many partitions)" time="1.283">
                                                 
                                               </testcase><testcase classname="io.projectglow.vcf.MultiFileVCFWriterSuite" name="Use VCF parser with sample IDs (many partitions)" time="1.248">
                                                 
                                               </testcase><testcase classname="io.projectglow.vcf.MultiFileVCFWriterSuite" name="Strict validation stringency" time="0.095">
                                                 
                                               </testcase><testcase classname="io.projectglow.vcf.MultiFileVCFWriterSuite" name="Output bgzf compressed file" time="0.126">
                                                 
                                               </testcase><testcase classname="io.projectglow.vcf.MultiFileVCFWriterSuite" name="Output gzip compressed file" time="0.105">
                                                 
                                               </testcase><testcase classname="io.projectglow.vcf.MultiFileVCFWriterSuite" name="variant context validation settings obey stringency" time="0.175">
                                                 
                                               </testcase><testcase classname="io.projectglow.vcf.MultiFileVCFWriterSuite" name="Provided header is sorted" time="0.12">
                                                 
                                               </testcase><testcase classname="io.projectglow.vcf.MultiFileVCFWriterSuite" name="Path header" time="0.862">
                                                 
                                               </testcase><testcase classname="io.projectglow.vcf.MultiFileVCFWriterSuite" name="Infer header" time="0.112">
                                                 
                                               </testcase><testcase classname="io.projectglow.vcf.MultiFileVCFWriterSuite" name="Empty file with inferred header" time="0.083">
                                                 
                                               </testcase><testcase classname="io.projectglow.vcf.MultiFileVCFWriterSuite" name="Empty file with determined header" time="0.205">
                                                 
                                               </testcase><testcase classname="io.projectglow.vcf.MultiFileVCFWriterSuite" name="No genotypes column" time="0.129">
                                                 
                                               </testcase><testcase classname="io.projectglow.vcf.MultiFileVCFWriterSuite" name="No sample IDs column" time="0.242">
                                                 
                                               </testcase><testcase classname="io.projectglow.vcf.MultiFileVCFWriterSuite" name="write succeeds if optional fields are dropped" time="6.356">
                                                 
                                               </testcase><testcase classname="io.projectglow.vcf.MultiFileVCFWriterSuite" name="validate schema before write" time="0.244">
                                                 
                                               </testcase><testcase classname="io.projectglow.vcf.MultiFileVCFWriterSuite" name="validate genotype schema before write" time="0.27">
                                                 
                                               </testcase><testcase classname="io.projectglow.vcf.MultiFileVCFWriterSuite" name="Corrupted header lines are not written" time="0.08">
                                                 
                                               </testcase><testcase classname="io.projectglow.vcf.MultiFileVCFWriterSuite" name="Invalid validation stringency" time="0.102">
                                                 
                                               </testcase><testcase classname="io.projectglow.vcf.MultiFileVCFWriterSuite" name="Some empty partitions and infer sample IDs" time="0.154">
                                                 <failure message="org.scalatest.exceptions.TestFailedException: Expected exception org.apache.spark.SparkException to be thrown, but no exception was thrown" type="sbt.ForkMain$ForkError">sbt.ForkMain$ForkError: org.scalatest.exceptions.TestFailedException: Expected exception org.apache.spark.SparkException to be thrown, but no exception was thrown
	at org.scalatest.Assertions.newAssertionFailedException(Assertions.scala:472)
	at org.scalatest.Assertions.newAssertionFailedException$(Assertions.scala:471)
	at org.scalatest.funsuite.AnyFunSuite.newAssertionFailedException(AnyFunSuite.scala:1563)
	at org.scalatest.Assertions.assertThrows(Assertions.scala:825)
	at org.scalatest.Assertions.assertThrows$(Assertions.scala:804)
	at org.scalatest.funsuite.AnyFunSuite.assertThrows(AnyFunSuite.scala:1563)
	at io.projectglow.vcf.MultiFileVCFWriterSuite.$anonfun$new$44(VCFFileWriterSuite.scala:507)
	at org.scalatest.OutcomeOf.outcomeOf(OutcomeOf.scala:85)
	at org.scalatest.OutcomeOf.outcomeOf$(OutcomeOf.scala:83)
	at org.scalatest.OutcomeOf$.outcomeOf(OutcomeOf.scala:104)
	at org.scalatest.Transformer.apply(Transformer.scala:22)
	at org.scalatest.Transformer.apply(Transformer.scala:20)
	at org.scalatest.funsuite.AnyFunSuiteLike$$anon$1.apply(AnyFunSuiteLike.scala:190)
	at org.scalatest.TestSuite.withFixture(TestSuite.scala:196)
	at org.scalatest.TestSuite.withFixture$(TestSuite.scala:195)
	at org.scalatest.funsuite.AnyFunSuite.withFixture(AnyFunSuite.scala:1563)
	at org.scalatest.funsuite.AnyFunSuiteLike.invokeWithFixture$1(AnyFunSuiteLike.scala:188)
	at org.scalatest.funsuite.AnyFunSuiteLike.$anonfun$runTest$1(AnyFunSuiteLike.scala:200)
	at org.scalatest.SuperEngine.runTestImpl(Engine.scala:306)
	at org.scalatest.funsuite.AnyFunSuiteLike.runTest(AnyFunSuiteLike.scala:200)
	at org.scalatest.funsuite.AnyFunSuiteLike.runTest$(AnyFunSuiteLike.scala:182)
	at io.projectglow.sql.GlowBaseTest.org$scalatest$BeforeAndAfterEach$$super$runTest(GlowBaseTest.scala:29)
	at org.scalatest.BeforeAndAfterEach.runTest(BeforeAndAfterEach.scala:234)
	at org.scalatest.BeforeAndAfterEach.runTest$(BeforeAndAfterEach.scala:227)
	at io.projectglow.sql.GlowBaseTest.runTest(GlowBaseTest.scala:63)
	at org.scalatest.funsuite.AnyFunSuiteLike.$anonfun$runTests$1(AnyFunSuiteLike.scala:233)
	at org.scalatest.SuperEngine.$anonfun$runTestsInBranch$1(Engine.scala:413)
	at scala.collection.immutable.List.foreach(List.scala:392)
	at org.scalatest.SuperEngine.traverseSubNodes$1(Engine.scala:401)
	at org.scalatest.SuperEngine.runTestsInBranch(Engine.scala:396)
	at org.scalatest.SuperEngine.runTestsImpl(Engine.scala:475)
	at org.scalatest.funsuite.AnyFunSuiteLike.runTests(AnyFunSuiteLike.scala:233)
	at org.scalatest.funsuite.AnyFunSuiteLike.runTests$(AnyFunSuiteLike.scala:232)
	at org.scalatest.funsuite.AnyFunSuite.runTests(AnyFunSuite.scala:1563)
	at org.scalatest.Suite.run(Suite.scala:1112)
	at org.scalatest.Suite.run$(Suite.scala:1094)
	at org.scalatest.funsuite.AnyFunSuite.org$scalatest$funsuite$AnyFunSuiteLike$$super$run(AnyFunSuite.scala:1563)
	at org.scalatest.funsuite.AnyFunSuiteLike.$anonfun$run$1(AnyFunSuiteLike.scala:237)
	at org.scalatest.SuperEngine.runImpl(Engine.scala:535)
	at org.scalatest.funsuite.AnyFunSuiteLike.run(AnyFunSuiteLike.scala:237)
	at org.scalatest.funsuite.AnyFunSuiteLike.run$(AnyFunSuiteLike.scala:236)
	at io.projectglow.sql.GlowBaseTest.org$scalatest$BeforeAndAfterAll$$super$run(GlowBaseTest.scala:29)
	at org.scalatest.BeforeAndAfterAll.liftedTree1$1(BeforeAndAfterAll.scala:213)
	at org.scalatest.BeforeAndAfterAll.run(BeforeAndAfterAll.scala:210)
	at org.scalatest.BeforeAndAfterAll.run$(BeforeAndAfterAll.scala:208)
	at io.projectglow.sql.GlowBaseTest.run(GlowBaseTest.scala:29)
	at org.scalatest.tools.Framework.org$scalatest$tools$Framework$$runSuite(Framework.scala:318)
	at org.scalatest.tools.Framework$ScalaTestTask.execute(Framework.scala:513)
	at sbt.ForkMain$Run.lambda$runTest$1(ForkMain.java:304)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
</failure>
                                               </testcase><testcase classname="io.projectglow.vcf.MultiFileVCFWriterSuite" name="Fails if inferred present sample IDs but row missing sample IDs" time="0.165">
                                                 
                                               </testcase><testcase classname="io.projectglow.vcf.MultiFileVCFWriterSuite" name="Fails if inferred present sample IDs but row has different sample IDs" time="0.121">
                                                 
                                               </testcase><testcase classname="io.projectglow.vcf.MultiFileVCFWriterSuite" name="Fails if injected missing sample IDs don't match number of samples" time="0.123">
                                                 
                                               </testcase><testcase classname="io.projectglow.vcf.MultiFileVCFWriterSuite" name="Fails if injected missing sample IDs but has sample IDs" time="0.108">
                                                 
                                               </testcase>
                     <system-out><![CDATA[]]></system-out>
                     <system-err><![CDATA[]]></system-err>
                   </testsuite>